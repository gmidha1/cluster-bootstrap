# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# üíÅ The OpenShift Starter workflow will:
# - Checkout your repository
# - Perform a container image build
# - Push the built image to the GitHub Container Registry (GHCR)
# - Log in to your OpenShift cluster
# - Create an OpenShift app from the image and expose it to the internet

# ‚ÑπÔ∏è Configure your repository and the workflow with the following steps:
# 1. Have access to an OpenShift cluster. Refer to https://www.openshift.com/try
# 2. Create the OPENSHIFT_SERVER and OPENSHIFT_TOKEN repository secrets. Refer to:
#   - https://github.com/redhat-actions/oc-login#readme
#   - https://docs.github.com/en/actions/reference/encrypted-secrets
#   - https://cli.github.com/manual/gh_secret_set
# 3. (Optional) Edit the top-level 'env' section as marked with 'üñäÔ∏è' if the defaults are not suitable for your project.
# 4. (Optional) Edit the build-image step to build your project.
#    The default build type is by using a Dockerfile at the root of the repository,
#    but can be replaced with a different file, a source-to-image build, or a step-by-step buildah build.
# 5. Commit and push the workflow file to your default branch to trigger a workflow run.

# üëã Visit our GitHub organization at https://github.com/redhat-actions/ to see our actions and provide feedback.

name: OpenShift

env:
  # üñäÔ∏è EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  MINIO_USER: ${{ secrets.MINIO_ROOT_USER }}
  MINIO_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
  ARO_SERVER: ${{ secrets.ARO_SERVER }}
  ARO_TOKEN: ${{ secrets.ARO_TOKEN }}
  #GCP_SERVER: ${{ secrets.GCP_SERVER }}
  #GCP_TOKEN: ${{ secrets.GCP_TOKEN }}
  # üñäÔ∏è EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE: ""

  # üñäÔ∏è EDIT to set a name for your OpenShift app, or a default one will be generated below.
  APP_NAME: "gpt-java-chatbot"

  # üñäÔ∏è EDIT with the port your application should be accessible on.
  # If the container image exposes *exactly one* port, this can be left blank.
  # Refer to the 'port' input of https://github.com/redhat-actions/oc-new-app
  APP_PORT: ""

  # üñäÔ∏è EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: "quay.io"
  IMAGE_REGISTRY_USER: "gmidha"
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.QUAY_TOKEN }}

  # üñäÔ∏è EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: ""

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
  push:
    # Edit to the branch(es) you want to build and deploy on each push.
    branches: [ "main" ]

jobs:
  # üñäÔ∏è EDIT if you want to run vulnerability check on your project before deploying
  # the application. Please uncomment the below CRDA scan job and configure to run it in
  # your workflow. For details about CRDA action visit https://github.com/redhat-actions/crda/blob/main/README.md
  #
  # TODO: Make sure to add 'CRDA Scan' starter workflow from the 'Actions' tab.
  # For guide on adding new starter workflow visit https://docs.github.com/en/github-ae@latest/actions/using-workflows/using-starter-workflows

  #crda-scan:
  # uses: ./.github/workflows/crda.yml
  #  secrets:
  #    CRDA_KEY: ${{ secrets.CRDA_KEY }}
      # SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}       # Either use SNYK_TOKEN or CRDA_KEY

  rosa-ci-cd:
    # üñäÔ∏è Uncomment this if you are using CRDA scan step above
    # needs: crda-scan
    name: ROSA - Install Operators in OpenShift and Deploy Model in RHOAI
    runs-on: ubuntu-22.04
    environment: production

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      MSVC_IMAGE: ${{ steps.push-image.outputs.registry-path }}
      FEND_IMAGE: ${{ steps.push-image-frontend.outputs.registry-path }}

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`‚úîÔ∏è Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`‚ùå At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`‚úÖ All the required secrets are set`);
          }

    - name: Check out repository
      uses: actions/checkout@v3

    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    # https://github.com/redhat-actions/oc-login#readme
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
        openshift_token: ${{ env.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }} 
        
    
    - name: Install Operators and Deploy Model Server in RHOAI
      env:
        minio_user: ${{ secrets.MINIO_ROOT_USER }}
        minio_password: ${{ secrets.MINIO_ROOT_PASSWORD }} 
      run: |
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/project.yaml
        sleep 10
        echo "Installing Minio"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/s3.yaml 
        echo "Installing ElasticSearch"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/elastic/subs.yaml
        sleep 30
        echo "Installing OpenShift GitOps"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/openshift-gitops/ns.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/openshift-gitops/openshift-gitops-og.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/openshift-gitops/openshift-gitops-subs.yaml
        echo "Installing ServiceMesh"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/servicemesh/subs.yaml
        echo "Installing Serverless"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/serverless/ns.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/serverless/og.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/serverless/subs.yaml
        echo "Installing Red Hat OpenShift AI(RHOAI)"
        oc apply -k ${GITHUB_WORKSPACE}/deploy/openshift/operators/rhoai/
        echo "Installing Node Feature Discovery Operator"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nfd/ns.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nfd/og.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nfd/subs.yaml
        sleep 240
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nfd/nfd-instance.yaml
        echo "Creating Data Science Cluster in RHOAI"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/rhoai/dsc.yaml
        echo "Installing Nvidia GPU"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nvidia-gpu/ns.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nvidia-gpu/og.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nvidia-gpu/subs.yaml
        sleep 60
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nvidia-gpu/cluster-policy.yaml
        sleep 60
        echo "Configuring RHOAI and deploying Models"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/model-deploy/rbac-job-enable-modelcar.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/model-deploy/job-enable-modelcar.yaml
        sleep 360
        oc apply -k ${GITHUB_WORKSPACE}/deploy/openshift/model-deploy/
        echo "Installation Completes"

  aro-ci-cd:
    # üñäÔ∏è Uncomment this if you are using CRDA scan step above
    needs: rosa-ci-cd
    name: ARO - Install Operators in OpenShift and Deploy Model in RHOAI
    runs-on: ubuntu-22.04
    environment: production

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      MSVC_IMAGE: ${{ steps.push-image.outputs.registry-path }}
      FEND_IMAGE: ${{ steps.push-image-frontend.outputs.registry-path }}

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`‚úîÔ∏è Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`‚ùå At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`‚úÖ All the required secrets are set`);
          }

    - name: Check out repository
      uses: actions/checkout@v3

    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    # https://github.com/redhat-actions/oc-login#readme
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.ARO_SERVER }}
        openshift_token: ${{ env.ARO_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }} 
        
    
    - name: Install Operators and Deploy Model Server in RHOAI
      env:
        minio_user: ${{ secrets.MINIO_ROOT_USER }}
        minio_password: ${{ secrets.MINIO_ROOT_PASSWORD }} 
      run: |
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/project.yaml
        sleep 10
        echo "Installing Minio"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/s3.yaml 
        echo "Installing ElasticSearch"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/elastic/subs.yaml
        sleep 30
        echo "Installing OpenShift GitOps"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/openshift-gitops/ns.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/openshift-gitops/openshift-gitops-og.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/openshift-gitops/openshift-gitops-subs.yaml
        echo "Installing ServiceMesh"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/servicemesh/subs.yaml
        echo "Installing Serverless"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/serverless/ns.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/serverless/og.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/serverless/subs.yaml
        echo "Installing Red Hat OpenShift AI(RHOAI)"
        oc apply -k ${GITHUB_WORKSPACE}/deploy/openshift/operators/rhoai/
        echo "Installing Node Feature Discovery Operator"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nfd/ns.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nfd/og.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nfd/subs.yaml
        sleep 240
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nfd/nfd-instance.yaml
        echo "Creating Data Science Cluster in RHOAI"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/rhoai/dsc.yaml
        echo "Installing Nvidia GPU"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nvidia-gpu/ns.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nvidia-gpu/og.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nvidia-gpu/subs.yaml
        sleep 60
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/operators/nvidia-gpu/cluster-policy.yaml
        sleep 120
        echo "Configuring RHOAI and deploying Models"
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/model-deploy/rbac-job-enable-modelcar.yaml
        sleep 20
        oc apply -f ${GITHUB_WORKSPACE}/deploy/openshift/model-deploy/job-enable-modelcar.yaml
        sleep 360
        oc apply -k ${GITHUB_WORKSPACE}/deploy/openshift/model-deploy/
        echo "Installation Completes"





    

    
  